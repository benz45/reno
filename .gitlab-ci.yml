.alpine-base:
  image: alpine:3.16

.aws-base:
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest

.mvn-base:
  image: maven:3-jdk-11

stages:
  - Test
  - Package
  - Build
  - Checkout
  - Deploy

Unit Test:
  stage: Test
  extends: .mvn-base
  script:
    - "mvn clean install"
    - "mvn test"

Load Config:
  stage: Package
  needs: ["Unit Test"]
  extends: .aws-base
  script:
    - aws s3 cp s3://${AWS_S3_BUCKET}/rogue.py .
  artifacts:
    paths:
      - ./rogue.py


Load Maven:
  stage: Package
  needs: ["Unit Test"]
  script: "mvn package -B"
  extends: .mvn-base
  artifacts:
    paths:
      - target/*.jar

# Regression Test:
#   stage: Test
#   needs: ["Load Maven"]
#   script: "mvn test"

Build Docker Image:
  stage: Build
  image: docker
  services:
    - docker:dind
  needs:
    - job: "Load Maven"
      artifacts: true
    - job: "Load Config"
      artifacts: true
  variables:
    DOCKER_TLS_CERTDIR: ""
  script:
    - echo "Logging into ${CI_REGISTRY}"
    - docker login --username gitlab-ci-token --password "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker images
    - docker ps
    - docker push --all-tags $CI_REGISTRY_IMAGE

Generate Env:
  stage: Checkout
  needs: ["Build Docker Image"]
  extends: .aws-base
  script:
    - apt-get update && apt-get install -y jq
    - aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
    - aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
    - aws configure set default.region ap-southeast-1
    - aws configure set default.output json
    - echo "PROJECT_CONFIG=`aws secretsmanager get-secret-value --secret-id arn:aws:secretsmanager:ap-southeast-1:772962499539:secret:secret/spartan/db-0fkj3U --query SecretString --output text`" >> .env
  artifacts:
    reports:
      dotenv: .env

Generate SSH:
  stage: Checkout
  needs:
    - job: "Build Docker Image"
  extends: .aws-base
  script:
    - aws s3 cp s3://${AWS_S3_BUCKET}/beauty_pem.sh .
    - chmod 700 ./beauty_pem.sh
    - ./beauty_pem.sh "${AWS_PRIVATE_KEY}" ./main.pem > /dev/null
  artifacts:
    paths:
      - ./main.pem

Checkout Image:
  stage: Checkout
  extends: .alpine-base
  needs:
    - job: "Generate SSH"
      artifacts: true
  script:
    - ls -a
    - apk update && apk add openssh
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $AWS_SERVER_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - chmod 0400 main.pem
    - ssh -i main.pem $AWS_USER@$AWS_SERVER_IP "docker login --username gitlab-ci-token --password ${CI_JOB_TOKEN} ${CI_REGISTRY}"
    - ssh -i main.pem $AWS_USER@$AWS_SERVER_IP "docker kill $CI_PROJECT_NAME || true" && "docker rm $CI_PROJECT_NAME || true" && "docker rmi $CI_REGISTRY_IMAGE || true"
    - ssh -i main.pem $AWS_USER@$AWS_SERVER_IP "docker system prune -a -f --volumes"

Deploy:
  stage: Deploy
  extends: .alpine-base
  needs:
    - job: "Checkout Image"
    - job: "Generate Env"
      artifacts: true
    - job: "Generate SSH"
      artifacts: true
  script:
    - ls -a
    - apk update && apk add openssh
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $AWS_SERVER_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - chmod 0400 main.pem
    - ssh -i main.pem $AWS_USER@$AWS_SERVER_IP "docker login --username gitlab-ci-token --password ${CI_JOB_TOKEN} ${CI_REGISTRY}"
    - ssh -i main.pem $AWS_USER@$AWS_SERVER_IP "docker pull $CI_REGISTRY_IMAGE:latest"
    - ssh -i main.pem $AWS_USER@$AWS_SERVER_IP "docker run -d -p 8080:8080 --entrypoint /app/src/main/resources/run.sh -e ACTIVE_PROFILE='${CI_COMMIT_BRANCH}' -e PROJECT_CONFIG='${PROJECT_CONFIG}' --name $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:latest"
    - ssh -i main.pem $AWS_USER@$AWS_SERVER_IP "docker ps"

