image: maven:3-jdk-11

stages:
  - stage01
  - stage02
  # - Packaging
  # - Test
  # - Build
  # - Deploy

job01:
  stage: stage01
  script:
    - echo "DYNAMIC_ENV_URL=http://dynamictestenvironment1" >> deploy.env
  environment:
    # Name cannot be dynamically set from file
    name: $CI_PIPELINE_ID # can use CI + other vars
    # URL can be dynamically set from file
    url: $DYNAMIC_ENV_URL
  artifacts:
    reports:
      dotenv: deploy.env

job02:
  stage: stage02
  script:
    - echo $DYNAMIC_ENV_URL

# Maven Build:
#   image: maven:3-jdk-11
#   stage: Packaging
#   script: "mvn package -B"
#   artifacts:
#     paths:
#       - target/*.jar

# Environments Build:
#   image: amazon/aws-cli:latest
#   stage: Packaging
#   script: "mvn package -B"
#   artifacts:
#     paths:
#       - target/*.jar

# Unit Test:
#   stage: Test
#   needs: ["Maven Build"]
#   script: "mvn test"

# Regression Test:
#   stage: Test
#   needs: ["Maven Build"]
#   script: "mvn test"

# Build Docker Image:
#   stage: Build
#   image: docker
#   services:
#     - docker:dind
#   needs:
#     - job: "Maven Build"
#       artifacts: true
#     - job: "Unit Test"
#     - job: "Regression Test"
#   variables:
#     DOCKER_TLS_CERTDIR: ""
#   script:
#     - echo $CI_REGISTRY_USER
#     - echo $CI_REGISTRY_PASSWORD
#     - echo $CI_REGISTRY
#     - echo "Logging into ${CI_REGISTRY}"
#     - docker login --username gitlab-ci-token --password "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
#     - docker build -t $CI_REGISTRY_IMAGE .
#     - docker images
#     - docker ps
#     - docker push --all-tags $CI_REGISTRY_IMAGE

# Deploy:
#   stage: Deploy
#   image: alpine:latest
#   needs: ["Build Docker Image"]
#   before_script:
#     - apk update && apk add openssh
#     - echo $AWS_PRIVATE_KEY > main.txt
#     - sed -ie 's/-----BEGIN RSA PRIVATE KEY-----/-BEGIN-/g' main.txt
#     - sed -ie 's/-----END RSA PRIVATE KEY-----/-END-/g' main.txt
#     - sed -ie 's/ /\n/g' main.txt
#     - sed -ie 's/-BEGIN-/-----BEGIN RSA PRIVATE KEY-----/g' main.txt
#     - sed -ie 's/-END-/-----END RSA PRIVATE KEY-----/g' main.txt
#     - cat main.txt > main.pem
#     - chmod 0400 main.pem
#     - mkdir -p ~/.ssh
#     - chmod 700 ~/.ssh
#     - ssh-keyscan $AWS_SERVER_IP >> ~/.ssh/known_hosts
#     - chmod 644 ~/.ssh/known_hosts
#   script:
#     - ssh -i main.pem $AWS_USER@$AWS_SERVER_IP "docker login --username gitlab-ci-token --password ${CI_JOB_TOKEN} ${CI_REGISTRY}"
#     - ssh -i main.pem $AWS_USER@$AWS_SERVER_IP "docker rm -f $(docker ps -aq) >/dev/null 2>&1 || true"
#     - ssh -i main.pem $AWS_USER@$AWS_SERVER_IP "docker system prune -a -f --volumes"
#     - ssh -i main.pem $AWS_USER@$AWS_SERVER_IP "docker pull $CI_REGISTRY_IMAGE:latest"
#     - ssh -i main.pem $AWS_USER@$AWS_SERVER_IP "docker run -d -p 8080:8080 --entrypoint /app/src/main/resources/run.sh -e AWS_ACCESS_KEY_ID='${AWS_ACCESS_KEY_ID}' -e AWS_SECRET_ACCESS_KEY='${AWS_SECRET_ACCESS_KEY}' -e GIT_BRANCH=${CI_COMMIT_BRANCH} $CI_REGISTRY_IMAGE:latest"
#     - ssh -i main.pem $AWS_USER@$AWS_SERVER_IP "docker ps"
