stages:
  - test
  - package
  - build
  - deploy

test install:
  stage: test
  image: gitlab/dind:latest
  script:
    - apt-get install sudo -y
    - rm /var/lib/apt/lists/*
    - sudo apt install openssh-server -y
    
    

maven-build:
  image: maven:3-jdk-11
  stage: package
  script: "mvn package -B"
  artifacts:
    paths:
      - target/*.jar

build docker image:
  stage: build
  image: docker
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: ""
  script:
    - echo $CI_REGISTRY_USER
    - echo $CI_REGISTRY_PASSWORD
    - echo $CI_REGISTRY
    - echo "Logging into ${CI_REGISTRY}"
    - docker login --username gitlab-ci-token --password "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker images
    - docker ps
    - docker push --all-tags $CI_REGISTRY_IMAGE

deploy:
  stage: deploy
  image: gitlab/dind:latest
  before_script:
    - apt-get install sudo -y
    - sudo apt-get update
    - sudo apt install openssh-server -y
  script:
    - ssh -i $AWS_PRIVATE_KEY $AWS_SERVER_IP "docker pull $CI_REGISTRY_IMAGE"
    - ssh -i $AWS_PRIVATE_KEY $AWS_SERVER_IP "docker rm --force $CI_REGISTRY_IMAGE"
    - ssh -i $AWS_PRIVATE_KEY $AWS_SERVER_IP "docker run -d -p 8080:8080 --entrypoint /app/src/main/resources/run.sh $CI_REGISTRY_IMAGE"
    - ssh -i $AWS_PRIVATE_KEY $AWS_SERVER_IP "docker ps"
    # - docker login --username gitlab-ci-token --password "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
    # - docker rmi $CI_REGISTRY_IMAGE
    # - docker pull $CI_REGISTRY_IMAGE
    # - docker stop $(docker ps -ql) || true
    # - docker run -d -p 8080:8080 --entrypoint /app/src/main/resources/run.sh $CI_REGISTRY_IMAGE