stages:
  - test
  - package
  - build
  - deploy

test install:
  stage: test
  image: alpine:3.11
  script:
    - command -v ssh-agent >/dev/null || (apk add --update openssh)
    - eval $(ssh-agent -s)
    - mkdir ~/.ssh
    - chmod 700 ~/.ssh
    - echo $AWS_PRIVATE_KEY >> ~/.ssh/authorized_keys
    - chmod 600 ~/.ssh/authorized_keys
    - ssh-add ~/.ssh/authorized_keys
    # - echo "$AWS_PRIVATE_KEY" | tr -d '\r' | ssh-add
    - ssh-keyscan $AWS_SERVER_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - ssh -i $AWS_PRIVATE_KEY $AWS_SERVER_IP "docker ps -a"
    - ssh -i $AWS_PRIVATE_KEY $AWS_SERVER_IP "docker login --username gitlab-ci-token --password $CI_JOB_TOKEN $CI_REGISTRY"
    - ssh -i $AWS_PRIVATE_KEY $AWS_SERVER_IP "docker pull $CI_REGISTRY_IMAGE"
    - ssh -i $AWS_PRIVATE_KEY $AWS_SERVER_IP "docker rm --force $CI_REGISTRY_IMAGE"
    

maven-build:
  image: maven:3-jdk-11
  stage: package
  script: "mvn package -B"
  artifacts:
    paths:
      - target/*.jar

build docker image:
  stage: build
  image: docker
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: ""
  script:
    - echo $CI_REGISTRY_USER
    - echo $CI_REGISTRY_PASSWORD
    - echo $CI_REGISTRY
    - echo "Logging into ${CI_REGISTRY}"
    - docker login --username gitlab-ci-token --password "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker images
    - docker ps
    - docker push --all-tags $CI_REGISTRY_IMAGE

deploy:
  stage: deploy
  image: gitlab/dind:latest
  before_script:
    - apt-get install sudo -y
    - sudo apt-get update
    - sudo apt install openssh-server -y
  script:
    - ssh -i $AWS_PRIVATE_KEY $AWS_SERVER_IP "docker pull $CI_REGISTRY_IMAGE"
    - ssh -i $AWS_PRIVATE_KEY $AWS_SERVER_IP "docker rm --force $CI_REGISTRY_IMAGE"
    - ssh -i $AWS_PRIVATE_KEY $AWS_SERVER_IP "docker run -d -p 8080:8080 --entrypoint /app/src/main/resources/run.sh $CI_REGISTRY_IMAGE"
    - ssh -i $AWS_PRIVATE_KEY $AWS_SERVER_IP "docker ps"
    # - docker login --username gitlab-ci-token --password "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
    # - docker rmi $CI_REGISTRY_IMAGE
    # - docker pull $CI_REGISTRY_IMAGE
    # - docker stop $(docker ps -ql) || true
    # - docker run -d -p 8080:8080 --entrypoint /app/src/main/resources/run.sh $CI_REGISTRY_IMAGE